#!/usr/bin/python

import gobject

import sys
import dbus
import dbus.service
import dbus.mainloop.glib
import os.path
from optparse import OptionParser

class Agent(dbus.service.Object):
    def __init__(self, conn=None, obj_path=None, verbose=False):
        dbus.service.Object.__init__(self, conn, obj_path)
        self.verbose = verbose

    @dbus.service.method("org.openobex.Agent",
                    in_signature="o", out_signature="s")
    def Request(self, path):
        return ""

    @dbus.service.method("org.openobex.Agent",
                    in_signature="ot", out_signature="")
    def Progress(self, path, transferred):
        if self.verbose:
            print "Transfer progress (%d bytes)" % (transferred)
        return

    @dbus.service.method("org.openobex.Agent",
                    in_signature="o", out_signature="")
    def Complete(self, path):
        if self.verbose:
            print "Transfer finished"
        mainloop.quit()

    @dbus.service.method("org.openobex.Agent",
                    in_signature="os", out_signature="")
    def Error(self, path, error):
        print "Transfer finished with an error: %s" % (error)
        mainloop.quit()

    @dbus.service.method("org.openobex.Agent",
                    in_signature="", out_signature="")
    def Release(self):
        mainloop.quit()

def get_image_thumbnail_callback(option, opt, value, parser):
        parser.values.get_thumbnail = True
        parser.values.get_settings = value.split(',')
        print parser.values.get_settings

def get_image_callback(option, opt, value, parser):
        parser.values.get = True
        parser.values.get_settings = value.split(',')
        print parser.values.get_settings

def get_image_attachment_callback(option, opt, value, parser):
        parser.values.get_attachment = True
        parser.values.get_settings = value.split(',')
        print parser.values.get_settings

def get_image_properties_callback(option, opt, value, parser):
        parser.values.get_properties = True
        parser.values.get_settings = value.split(',')
        print parser.values.get_settings

def delete_image_callback(option, opt, value, parser):
        parser.values.delete_image = True
        parser.values.get_settings = value.split(',')
        print parser.values.get_settings

def parse_options():
    parser.add_option("-d", "--device", dest="device",
                      help="Device to connect", metavar="DEVICE")
    parser.add_option("-c", "--capabilities", action="store_true",
                      dest="capabilities",
                      help="Get imaging capabilities")
    parser.add_option("-l", "--listing", action="store_true",
                      dest="listing",
                      help="Get image")
    parser.add_option("-g", "--getimage", type="string", action="callback",
                      callback=get_image_callback,
                      help="Get images listing")
    parser.add_option("-t", "--getimagethumbnail", type="string", action="callback",
                      callback=get_image_thumbnail_callback,
                      help="Get image thumbnail")
    parser.add_option("-a", "--getimageattachment", type="string", action="callback",
                      callback=get_image_attachment_callback,
                      help="Get image attachment")
    parser.add_option("-p", "--getimageproperties", type="string", action="callback",
                      callback=get_image_properties_callback,
                      help="Get image properties")
    parser.add_option("-d", "--deleteimage", type="string", action="callback",
                      callback=delete_image_callback,
                      help="Delete image")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose")

    return parser.parse_args()

def images_listing(session):
    print session.GetImagesListingRange(1,1)
    print session.GetImagesListingRange(2,2)
    print session.GetImagesListingRange(3,3)
    print "pixel 100*200-400*400"
    print session.GetImagesListingRangeFilter(65535,0,{
        "pixel" : "100*200-400*400"
        })
    print "pixel 100*200-1600*1600"
    print session.GetImagesListingRangeFilter(65535,0,{
        "pixel" : "100*200-1600*1600"
        })
    print "pixel 1680*1050"
    print session.GetImagesListingRangeFilter(65535,0,{
        "pixel" : "1680*1050"
        })
    print "pixel 168**-3360*2100"
    print session.GetImagesListingRangeFilter(65535,0,{
        "pixel" : "168**-3360*2100"
        })
    print "encoding BMP"
    print session.GetImagesListingRangeFilter(65535,0,{
        "encoding" : "BMP"
        })
    print "created: 20110621T184115Z-20110621T184115Z"
    print session.GetImagesListingRangeFilter(65535,0,{
        "created" : "20110621T184115Z-20110621T184115Z"
        })
    print "created: 20110621T184116Z-20110621T184116Z"
    print session.GetImagesListingRangeFilter(65535,0,{
        "created" : "20110621T184116Z-20110621T184116Z"
        })
    print session.GetImagesListing()

def imaging_capabilities(session):
    print "omg"
    print session.GetImagingCapabilities()

def get_image_properties(session, handle):
    print session.GetImageProperties(handle)
    print "get image properties"

def delete_image(session, handle):
        print session.DeleteImage(handle)

def get_image(session, path, handle, encoding, width, height, transform):
        session.GetImage(path, handle, encoding, width+"*"+height, transform)
        print "GetImage returned"

def get_image_thumbnail(session, path, handle):
        session.GetImageThumbnail(path, handle)
        print "GetImageThumbnail returned"

def get_image_attachment(session, path, handle, name):
        session.GetImageAttachment(path, handle, name)
        print "GetImageAttachment returned"

def image_pull_completed():
        print "Pull completed"

def image_pull_thumbnail_completed():
        print "Pull thumbnail completed"

def image_pull_attachment_completed():
        print "Pull attachment completed"

def image_pull_failed(reason):
        print "Pull failed: "+reason

def image_pull_thumbnail_failed(reason):
        print "Pull thumbnail failed: "+reason

def image_pull_attachment_failed(reason):
        print "Pull attachment failed: "+reason

if  __name__ == '__main__':

    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

    parser = OptionParser()

    (options, args) = parse_options()

    if not options.device:
        parser.print_help()
        sys.exit(0)

    bus = dbus.SessionBus()
    mainloop = gobject.MainLoop()

    path = "/test/agent"
    agent = Agent(bus, path, options.verbose)
    
    bus.add_signal_receiver(image_pull_completed,
	dbus_interface="org.openobex.ImagePull",
	signal_name="GetImageCompleted")
    
    bus.add_signal_receiver(image_pull_thumbnail_completed,
	dbus_interface="org.openobex.ImagePull",
	signal_name="GetImageThumbnailCompleted")
    
    bus.add_signal_receiver(image_pull_failed,
	dbus_interface="org.openobex.ImagePull",
	signal_name="GetImageFailed")
    
    bus.add_signal_receiver(image_pull_thumbnail_failed,
	dbus_interface="org.openobex.ImagePull",
	signal_name="GetImageThumbnailFailed")
    
    bus.add_signal_receiver(image_pull_attachment_failed,
	dbus_interface="org.openobex.ImagePull",
	signal_name="GetImageAttachmentFailed")
    
    bus.add_signal_receiver(image_pull_attachment_completed,
	dbus_interface="org.openobex.ImagePull",
	signal_name="GetImageAttachmentCompleted")
	
    client = dbus.Interface(bus.get_object("org.openobex.client", "/"),
                            "org.openobex.Client")

    session_path = client.CreateSession({ "Destination": options.device,
        "Target": "BIP:PULL"})

    session = dbus.Interface(bus.get_object("org.openobex.client", session_path),
                 "org.openobex.Session")

    session.AssignAgent(path)

    bip = dbus.Interface(bus.get_object("org.openobex.client", session_path),
                 "org.openobex.ImagePull")
   
    if options.listing:
       images_listing(bip)
    if hasattr(options, 'get'):
       path = options.get_settings[0]
       handle = options.get_settings[1]
       encoding = options.get_settings[2]
       width = options.get_settings[3]
       height = options.get_settings[4]
       transform = options.get_settings[5]
       get_image(bip, path, handle, encoding, width, height, transform)
    if hasattr(options, 'get_thumbnail'):
       path = options.get_settings[0]
       handle = options.get_settings[1]
       get_image_thumbnail(bip, path, handle)
    if hasattr(options, 'get_attachment'):
       path = options.get_settings[0]
       handle = options.get_settings[1]
       name = options.get_settings[2]
       get_image_attachment(bip, path, handle, name)
    if hasattr(options, 'get_properties'):
       handle = options.get_settings[0]
       get_image_properties(bip, handle)
    if hasattr(options, 'delete_image'):
       handle = options.get_settings[0]
       get_image_properties(bip, handle)


    mainloop.run()
