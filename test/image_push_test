#!/usr/bin/python

import gobject

import sys
import dbus
import dbus.service
import dbus.mainloop.glib
import os.path
from optparse import OptionParser

class Agent(dbus.service.Object):
    def __init__(self, conn=None, obj_path=None, verbose=False):
        dbus.service.Object.__init__(self, conn, obj_path)
        self.verbose = verbose

    @dbus.service.method("org.openobex.Agent",
                    in_signature="o", out_signature="s")
    def Request(self, path):
        return ""

    @dbus.service.method("org.openobex.Agent",
                    in_signature="ot", out_signature="")
    def Progress(self, path, transferred):
        if self.verbose:
            print "Transfer progress (%d bytes)" % (transferred)
        return

    @dbus.service.method("org.openobex.Agent",
                    in_signature="o", out_signature="")
    def Complete(self, path):
        if self.verbose:
            print "Transfer finished"
        mainloop.quit()

    @dbus.service.method("org.openobex.Agent",
                    in_signature="os", out_signature="")
    def Error(self, path, error):
        print "Transfer finished with an error: %s" % (error)
        mainloop.quit()

    @dbus.service.method("org.openobex.Agent",
                    in_signature="", out_signature="")
    def Release(self):
        mainloop.quit()

tasks = []

def put_image_attachment_callback(option, opt, value, parser):
        tasks.append(("attachment", value.split(',')))

def put_image_callback(option, opt, value, parser):
        tasks.append(("image", value.split(',')))

def cap_callback(option, opt, value, parser):
        tasks.append(("capabilities", 0))

def parse_options():
    parser.add_option("-d", "--device", dest="device",
                      help="Device to connect", metavar="DEVICE")
    parser.add_option("-a", "--att", type="string", action="callback",
                      callback=put_image_attachment_callback,
                      help="Push image attachment\nExample: -a [path to file],[handle]")
    parser.add_option("-p", "--push", type="string", action="callback",
                      callback=put_image_callback,
                      help="Push image\nExample: -p [path to file]")
    parser.add_option("-c", "--capabilities", action="callback",
                      callback=cap_callback,
                      help="Get imaging capabilities\n")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose")

    return parser.parse_args()

cur = 0
bip = None

def image_push(session, filename):
    session.PutImage(os.path.abspath(filename))
    #session.PutModifiedImage(os.path.abspath(filename),"BMP",1000,200,"fill")
    return False

def image_attachment_push(session, filename, handle):
    session.PutImageAttachment(os.path.abspath(filename),handle)
    print "Push Attachment finished"
    return False

def imaging_capabilities(session):
    print session.GetImagingCapabilities()
    return True

def execute():
    global tasks
    while True:
        if len(tasks) == 0:
            return
        entry = tasks[0]
        tasks.pop(0)
        ret = False
        if entry[0] == "image":
            ret = image_push(bip, entry[1][0])
        if entry[0] == "attachment":
            ret = image_attachment_push(bip, entry[1][0], entry[1][1])
        if entry[0] == "capabilities":
            ret = imaging_capabilities(bip)

        if not ret:
            break


def image_push_completed(handle):
    print "Image pushed, received handle: "+handle
    execute()

def image_push_failed(reason):
    print "Image push failed, reason: "+reason
    execute()

def attachment_push_completed():
    print "Attachment push completed"
    execute()

def attachment_push_failed(reason):
    print "Attachment push failed, reason: "+reason
    execute()

if  __name__ == '__main__':

    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

    parser = OptionParser("usage: %prog [options / commands]\n" +
                    "Example: %prog -p image.jpg -a att1,0000000 -p image2.jpg")

    (options, args) = parse_options()

    if not options.device:
        parser.print_help()
        sys.exit(0)

    bus = dbus.SessionBus()
    mainloop = gobject.MainLoop()

    path = "/test/agent"
    agent = Agent(bus, path, options.verbose)
	
    bus.add_signal_receiver(image_push_completed,
	dbus_interface="org.openobex.BipSignal",
	signal_name="PutImageCompleted")
    
    bus.add_signal_receiver(image_push_failed,
	dbus_interface="org.openobex.BipSignal",
	signal_name="PutImageFailed")
    
    bus.add_signal_receiver(attachment_push_completed,
	dbus_interface="org.openobex.BipSignal",
	signal_name="PutAttachmentCompleted")
    
    bus.add_signal_receiver(attachment_push_failed,
	dbus_interface="org.openobex.BipSignal",
	signal_name="PutAttachmentFailed")

    client = dbus.Interface(bus.get_object("org.openobex.client", "/"),
                            "org.openobex.Client")

    session_path = client.CreateSession({ "Destination": options.device,
        "Target": "BIP:PUSH"})

    session = dbus.Interface(bus.get_object("org.openobex.client", session_path),
                 "org.openobex.Session")

    session.AssignAgent(path)

    bip = dbus.Interface(bus.get_object("org.openobex.client", session_path),
                 "org.openobex.ImagePush")
    
    execute()

    mainloop.run()
